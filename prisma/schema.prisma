// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant architecture - Core tenant model
model Tenant {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  domain      String? @unique
  description String?
  logo        String?
  settings    Json    @default("{}")

  // Subscription and billing
  subscriptionTier   String    @default("free")
  subscriptionStatus String    @default("active")
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)

  // Resource quotas
  maxProducts  Int @default(100)
  maxCustomers Int @default(1000)
  maxStorage   Int @default(1024) // MB

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users      User[]
  products   Product[]
  categories Category[]
  orders     Order[]
  customers  Customer[]

  @@map("tenants")
}

// User authentication and roles
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?

  // Multi-tenant user isolation
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Role-based access control
  role UserRole @default(CUSTOMER)

  // Account status
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  orders   Order[]

  @@map("users")
}

// NextAuth.js integration
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product catalog
model Product {
  id           String   @id @default(cuid())
  name         String
  slug         String
  description  String?
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)

  // Inventory
  sku               String?
  barcode           String?
  stock             Int     @default(0)
  lowStockThreshold Int     @default(5)
  trackInventory    Boolean @default(true)

  // Product details
  weight     Decimal? @db.Decimal(8, 2)
  dimensions Json?
  images     String[]
  isActive   Boolean  @default(true)
  isFeatured Boolean  @default(false)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Multi-tenant isolation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Categories
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems      OrderItem[]
  productVariants ProductVariant[]

  @@unique([tenantId, slug])
  @@map("products")
}

// Product categories
model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean @default(true)

  // Hierarchy
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  // Multi-tenant isolation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@unique([tenantId, slug])
  @@map("categories")
}

// Product variants (size, color, etc.)
model ProductVariant {
  id    String   @id @default(cuid())
  name  String
  sku   String?
  price Decimal? @db.Decimal(10, 2)
  stock Int      @default(0)

  // Variant options
  options Json // { size: "L", color: "Red" }

  // Product relation
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("product_variants")
}

// Customer management
model Customer {
  id        String  @id @default(cuid())
  email     String
  firstName String?
  lastName  String?
  phone     String?

  // Address information
  addresses Json? // Array of addresses

  // Customer preferences
  preferences Json? // Marketing preferences, etc.

  // Multi-tenant isolation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders Order[]

  @@unique([tenantId, email])
  @@map("customers")
}

// Order management
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)

  // Customer information
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  // User who placed the order (if logged in)
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Order details
  subtotal       Decimal @db.Decimal(10, 2)
  taxAmount      Decimal @default(0) @db.Decimal(10, 2)
  shippingAmount Decimal @default(0) @db.Decimal(10, 2)
  discountAmount Decimal @default(0) @db.Decimal(10, 2)
  total          Decimal @db.Decimal(10, 2)

  // Shipping information
  shippingAddress Json?
  billingAddress  Json?

  // Payment information
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?

  // Shipping information
  trackingNumber String?
  shippingMethod String?
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Notes
  customerNotes String?
  adminNotes    String?

  // Multi-tenant isolation
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("orders")
}

// Order items
model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)

  // Product information
  productId String
  product   Product @relation(fields: [productId], references: [id])

  // Variant information
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  // Order relation
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
